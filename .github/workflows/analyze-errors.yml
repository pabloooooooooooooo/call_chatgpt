name: Analyse de logs r√©utilisable

# Changement majeur ici : on utilise "workflow_call" au lieu de "workflow_dispatch"
on:
  workflow_call:
    # Les inputs sont maintenant d√©finis ici
    inputs:
      logs:
        required: true
        type: string
      pr_number:
        required: true
        type: string
      # Le num√©ro de la PR doit √™tre associ√© √† un d√©p√¥t, on le passe en input
      repo_owner:
        required: true
        type: string
      repo_name:
        required: true
        type: string
        
    # Les secrets que ce workflow attend de recevoir de l'appelant
    secrets:
      OPENAI_API_KEY:
        required: true
      GH_TOKEN:
        required: true

jobs:
  analyze-and-comment:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    
    steps:
      - name: Analyser les logs avec ChatGPT
        id: chatgpt-analysis
        run: |
          # set -e: Arr√™te le script si une commande √©choue
          # set -o pipefail: Assure que l'√©chec dans un pipe est d√©tect√©
          set -eo pipefail

          echo "--- D√©but de l'analyse des logs ---"

          # √âtape 1: Pr√©parer le corps de la requ√™te en JSON
          # Cela √©vite les erreurs si les logs contiennent des caract√®res sp√©ciaux comme des guillemets
          json_payload=$(jq -n \
            --arg model "gpt-3.5-turbo" \
            --arg logs "${{ inputs.logs }}" \
            '{
              "model": $model,
              "messages": [
                {
                  "role": "system",
                  "content": "Tu es un assistant expert en analyse de logs d''erreurs. Analyse les logs suivants et fournis un r√©sum√© concis des erreurs potentielles et des suggestions de correction. Formatte ta r√©ponse en Markdown."
                },
                {
                  "role": "user",
                  "content": $logs
                }
              ],
              "max_tokens": 512,
              "temperature": 0.5
            }')

          # √âtape 2: Appeler l'API OpenAI avec le JSON pr√©par√©
          # L'option -f (fail) fait √©chouer curl si le code de statut HTTP est une erreur (>=400)
          response=$(curl -s -f -X POST https://api.openai.com/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
            -d "$json_payload")

          # √âtape 3: Journaliser la r√©ponse BRUTE de l'API pour le d√©bogage
          # C'est l'√©tape la plus importante pour comprendre le probl√®me !
          echo "--- R√©ponse de l'API OpenAI ---"
          echo "$response"
          echo "-----------------------------"

          # √âtape 4: Extraire le contenu. jq √©chouera si le chemin n'existe pas, arr√™tant le script gr√¢ce √† "set -e"
          analysis_content=$(echo "$response" | jq -r '.choices[0].message.content')
          
          # Si le contenu est vide ou null, on force une erreur pour √™tre explicite
          if [ -z "$analysis_content" ] || [ "$analysis_content" == "null" ]; then
            echo "Erreur: Le contenu extrait de la r√©ponse de l'API est vide ou null."
            exit 1
          fi

          # √âtape 5: Transmettre le r√©sultat √† l'√©tape suivante
          echo "analysis<<EOF" >> $GITHUB_OUTPUT
          echo "$analysis_content" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        shell: bash

      - name: Commenter sur la Pull Request
        # Cette √©tape ne s'ex√©cutera que si la pr√©c√©dente a r√©ussi
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const comment_body = `### Analyse des logs par ChatGPT ü§ñ\n\n${{ steps.chatgpt-analysis.outputs.analysis }}`;

            await github.rest.issues.createComment({
              owner: '${{ inputs.repo_owner }}',
              repo: '${{ inputs.repo_name }}',
              issue_number: ${{ inputs.pr_number }},
              body: comment_body
            });
