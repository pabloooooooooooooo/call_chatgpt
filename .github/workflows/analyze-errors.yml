name: Analyze Errors with ChatGPT

on:
  workflow_call:
    inputs:
      logs:
        required: true
        type: string
      pr_number:
        required: true
        type: string
    secrets:
      OPENAI_API_KEY:
        required: true
      GH_TOKEN:
        required: true

jobs:
  analyze:
    runs-on: ubuntu-latest
    steps:
      - name: Appel API ChatGPT
        id: chatgpt
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          # Construire le payload proprement
          payload=$(jq -n \
            --arg logs "${{ inputs.logs }}" \
            '{
              model: "gpt-4o-mini",
              messages: [
                {role: "system", content: "Tu es un assistant DevOps. Analyse les logs d’erreur de CI et explique la cause du problème de manière concise."},
                {role: "user", content: $logs}
              ]
            }')

          echo "== Envoi à OpenAI =="
          echo "$payload" | jq .

          # Appel de l’API OpenAI
          response=$(curl -s https://api.openai.com/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -d "$payload" | jq -r '.choices[0].message.content // empty')

          # Sauvegarde de la réponse pour l’étape suivante
          echo "response<<EOF" >> $GITHUB_OUTPUT
          echo "${response:-Aucune réponse du modèle.}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Commenter sur la PR
        if: ${{ steps.chatgpt.outputs.response != '' }}
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
            gh api \
            -H "Authorization: token $GH_TOKEN" \
            repos/${{ github.repository }}/issues/${{ inputs.pr_number }}/comments \
            -f body="${{ steps.chatgpt.outputs.response }}"
